// <auto-generated />
using System;
using System.Text.Json;
using ECM.Ocr.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECM.Ocr.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(OcrDbContext))]
    [Migration("20251031064319_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ocr")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECM.Ocr.Domain.Annotations.OcrAnnotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("BoundingBox")
                        .HasColumnType("jsonb")
                        .HasColumnName("bbox_abs");

                    b.Property<decimal?>("Confidence")
                        .HasColumnType("numeric")
                        .HasColumnName("confidence");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<string>("FieldKey")
                        .HasColumnType("text")
                        .HasColumnName("field_key");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("ValueText")
                        .HasColumnType("text")
                        .HasColumnName("value_text");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.HasKey("Id")
                        .HasName("pk_annotation");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_annotation_template_id");

                    b.HasIndex("DocumentId", "VersionId")
                        .HasDatabaseName("ix_annotation_document_id_version_id");

                    b.ToTable("annotation", "ocr");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Extractions.OcrExtraction", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.Property<string>("FieldKey")
                        .HasColumnType("text")
                        .HasColumnName("field_key");

                    b.Property<decimal?>("Confidence")
                        .HasColumnType("numeric")
                        .HasColumnName("confidence");

                    b.Property<JsonDocument>("Provenance")
                        .HasColumnType("jsonb")
                        .HasColumnName("provenance");

                    b.Property<string>("ValueText")
                        .HasColumnType("text")
                        .HasColumnName("value_text");

                    b.HasKey("DocumentId", "VersionId", "FieldKey")
                        .HasName("pk_extraction");

                    b.ToTable("extraction", "ocr");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Results.OcrDocumentResult", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<int>("Pages")
                        .HasColumnType("integer")
                        .HasColumnName("pages");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("DocumentId", "VersionId")
                        .HasName("pk_result");

                    b.ToTable("result", "ocr");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Results.OcrPageText", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.Property<int>("PageNo")
                        .HasColumnType("integer")
                        .HasColumnName("page_no");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.HasKey("DocumentId", "VersionId", "PageNo")
                        .HasName("pk_page_text");

                    b.ToTable("page_text", "ocr");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Templates.OcrFieldDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("Anchor")
                        .HasColumnType("jsonb")
                        .HasColumnName("anchor");

                    b.Property<JsonDocument>("BoundingBoxRelative")
                        .HasColumnType("jsonb")
                        .HasColumnName("bbox_rel");

                    b.Property<string>("FieldKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("field_key");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("integer")
                        .HasColumnName("order_no");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("Validator")
                        .HasColumnType("text")
                        .HasColumnName("validator");

                    b.HasKey("Id")
                        .HasName("pk_field_def");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_field_def_template_id");

                    b.ToTable("field_def", "ocr");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Templates.OcrTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PageSide")
                        .HasColumnType("text")
                        .HasColumnName("page_side");

                    b.Property<string>("SizeRatio")
                        .HasColumnType("text")
                        .HasColumnName("size_ratio");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_template");

                    b.ToTable("template", "ocr");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Annotations.OcrAnnotation", b =>
                {
                    b.HasOne("ECM.Ocr.Domain.Templates.OcrTemplate", "Template")
                        .WithMany("Annotations")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_annotation_templates_template_id");

                    b.HasOne("ECM.Ocr.Domain.Results.OcrDocumentResult", "Result")
                        .WithMany("Annotations")
                        .HasForeignKey("DocumentId", "VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_annotation_result_document_id_version_id");

                    b.Navigation("Result");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Extractions.OcrExtraction", b =>
                {
                    b.HasOne("ECM.Ocr.Domain.Results.OcrDocumentResult", "Result")
                        .WithMany("Extractions")
                        .HasForeignKey("DocumentId", "VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_extraction_result_document_id_version_id");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Results.OcrPageText", b =>
                {
                    b.HasOne("ECM.Ocr.Domain.Results.OcrDocumentResult", "Result")
                        .WithMany("PageTexts")
                        .HasForeignKey("DocumentId", "VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_page_text_result_document_id_version_id");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Templates.OcrFieldDefinition", b =>
                {
                    b.HasOne("ECM.Ocr.Domain.Templates.OcrTemplate", "Template")
                        .WithMany("Fields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_field_def_templates_template_id");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Results.OcrDocumentResult", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Extractions");

                    b.Navigation("PageTexts");
                });

            modelBuilder.Entity("ECM.Ocr.Domain.Templates.OcrTemplate", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
