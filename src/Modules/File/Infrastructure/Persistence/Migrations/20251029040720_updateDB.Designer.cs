// <auto-generated />
using System;
using ECM.File.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECM.File.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(FileDbContext))]
    [Migration("20251029040720_updateDB")]
    partial class updateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("file")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECM.File.Infrastructure.Persistence.Models.ShareAccessEventEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("occurred_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Ok")
                        .HasColumnType("boolean")
                        .HasColumnName("ok");

                    b.Property<string>("RemoteIp")
                        .HasColumnType("text")
                        .HasColumnName("remote_ip");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("uuid")
                        .HasColumnName("share_id");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("pk_share_access_event");

                    b.HasIndex("ShareId")
                        .HasDatabaseName("ix_share_access_event_share_id");

                    b.ToTable("share_access_event", "file");
                });

            modelBuilder.Entity("ECM.File.Infrastructure.Persistence.Models.ShareLinkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string[]>("AllowedIps")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("allowed_ips");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("file_content_type");

                    b.Property<DateTimeOffset?>("FileCreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("file_created_at");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("file_extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<int?>("MaxDownloads")
                        .HasColumnType("integer")
                        .HasColumnName("max_downloads");

                    b.Property<int?>("MaxViews")
                        .HasColumnType("integer")
                        .HasColumnName("max_views");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string[]>("Permissions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("permissions");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("revoked_at");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<string>("SubjectType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject_type");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("valid_from")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("timestamptz")
                        .HasColumnName("valid_to");

                    b.Property<Guid?>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.Property<string>("WatermarkJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("watermark");

                    b.HasKey("Id")
                        .HasName("pk_share_link");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_share_link_code");

                    b.HasIndex("DocumentId", "VersionId")
                        .HasDatabaseName("ix_share_link_doc");

                    b.ToTable("share_link", "file");
                });

            modelBuilder.Entity("ECM.File.Infrastructure.Persistence.Models.ShareStatisticsView", b =>
                {
                    b.Property<long>("Downloads")
                        .HasColumnType("bigint")
                        .HasColumnName("downloads");

                    b.Property<long>("Failures")
                        .HasColumnType("bigint")
                        .HasColumnName("failures");

                    b.Property<DateTimeOffset?>("LastAccess")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_access");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("uuid")
                        .HasColumnName("share_id");

                    b.Property<long>("Views")
                        .HasColumnType("bigint")
                        .HasColumnName("views");

                    b.ToTable((string)null);

                    b.ToView("share_stats", "file");
                });

            modelBuilder.Entity("ECM.File.Infrastructure.Persistence.Models.StoredFileEntity", b =>
                {
                    b.Property<string>("StorageKey")
                        .HasColumnType("text")
                        .HasColumnName("storage_key");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("LegalHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("legal_hold");

                    b.HasKey("StorageKey")
                        .HasName("pk_file_object");

                    b.ToTable("file_object", "file");
                });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Aggregate")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("aggregate");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<DateTimeOffset>("OccurredAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTimeOffset?>("ProcessedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox");

                    b.ToTable("outbox", "ops", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ECM.File.Infrastructure.Persistence.Models.ShareAccessEventEntity", b =>
                {
                    b.HasOne("ECM.File.Infrastructure.Persistence.Models.ShareLinkEntity", "Share")
                        .WithMany()
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_share_access_event_share_links_share_id");

                    b.Navigation("Share");
                });
#pragma warning restore 612, 618
        }
    }
}
