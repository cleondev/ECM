// <auto-generated />
using System;
using ECM.Document.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECM.Document.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DocumentDbContext))]
    [Migration("20251029034406_updateDbAddSt")]
    partial class updateDbAddSt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("doc")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECM.Document.Domain.DocumentTypes.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_key");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_document_type");

                    b.HasIndex("TypeKey")
                        .IsUnique()
                        .HasDatabaseName("IX_document_type_type_key");

                    b.ToTable("document_type", "doc");
                });

            modelBuilder.Entity("ECM.Document.Domain.Documents.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doc_type");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Sensitivity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Internal")
                        .HasColumnName("sensitivity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_document");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_document_created_by");

                    b.HasIndex("DocType")
                        .HasDatabaseName("doc_document_type_idx");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("doc_document_owner_idx");

                    b.HasIndex("Status")
                        .HasDatabaseName("doc_document_status_idx");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("IX_document_type_id");

                    b.HasIndex("UpdatedAtUtc", "Id")
                        .IsDescending()
                        .HasDatabaseName("doc_document_updated_at_id_idx");

                    b.ToTable("document", "doc");
                });

            modelBuilder.Entity("ECM.Document.Domain.Documents.DocumentMetadata", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("data")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.HasKey("DocumentId")
                        .HasName("pk_metadata");

                    b.ToTable("metadata", "doc");
                });

            modelBuilder.Entity("ECM.Document.Domain.Files.FileObject", b =>
                {
                    b.Property<string>("StorageKey")
                        .HasColumnType("text")
                        .HasColumnName("storage_key");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("LegalHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("legal_hold");

                    b.HasKey("StorageKey")
                        .HasName("pk_file_object");

                    b.ToTable("file_object", "doc");
                });

            modelBuilder.Entity("ECM.Document.Domain.Signatures.SignatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("RequestReference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_ref");

                    b.Property<Guid>("RequestedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("requested_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("version_id");

                    b.HasKey("Id")
                        .HasName("pk_signature_request");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("IX_signature_request_document_id");

                    b.HasIndex("RequestedBy")
                        .HasDatabaseName("IX_signature_request_requested_by");

                    b.HasIndex("VersionId")
                        .HasDatabaseName("IX_signature_request_version_id");

                    b.ToTable("signature_request", "doc");
                });

            modelBuilder.Entity("ECM.Document.Domain.Signatures.SignatureResult", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<string>("EvidenceHash")
                        .HasColumnType("text")
                        .HasColumnName("evidence_hash");

                    b.Property<string>("EvidenceUrl")
                        .HasColumnType("text")
                        .HasColumnName("evidence_url");

                    b.Property<string>("RawResponse")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("raw_response")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<DateTimeOffset>("ReceivedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("received_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("RequestId")
                        .HasName("pk_signature_result");

                    b.ToTable("signature_result", "doc");
                });

            modelBuilder.Entity("ECM.Document.Domain.Tags.DocumentTag", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<DateTimeOffset>("AppliedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("applied_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("AppliedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("applied_by");

                    b.HasKey("DocumentId", "TagId")
                        .HasName("pk_document_tag");

                    b.HasIndex("AppliedBy")
                        .HasDatabaseName("IX_document_tag_applied_by");

                    b.HasIndex("TagId")
                        .HasDatabaseName("IX_document_tag_tag_id");

                    b.ToTable("document_tag", "doc");
                });

            modelBuilder.Entity("ECM.Document.Domain.Tags.TagLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("NamespaceSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("namespace_slug");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_tag_label");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_tag_label_created_by");

                    b.HasIndex("NamespaceSlug")
                        .HasDatabaseName("IX_tag_label_namespace_slug");

                    b.HasIndex("NamespaceSlug", "Path")
                        .IsUnique()
                        .HasDatabaseName("tag_label_ns_path_idx");

                    b.ToTable("tag_label", "doc", t =>
                        {
                            t.HasCheckConstraint("chk_tag_path_format", "path ~ '^[a-z0-9_]+(-[a-z0-9_]+)*$'");
                        });
                });

            modelBuilder.Entity("ECM.Document.Domain.Tags.TagNamespace", b =>
                {
                    b.Property<string>("NamespaceSlug")
                        .HasColumnType("text")
                        .HasColumnName("namespace_slug");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.HasKey("NamespaceSlug")
                        .HasName("pk_tag_namespace");

                    b.ToTable("tag_namespace", "doc", t =>
                        {
                            t.HasCheckConstraint("chk_tag_namespace_kind", "kind IN ('system','user')");
                        });
                });

            modelBuilder.Entity("ECM.Document.Domain.Versions.DocumentVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Bytes")
                        .HasColumnType("bigint")
                        .HasColumnName("bytes");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sha256");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_key");

                    b.Property<int>("VersionNo")
                        .HasColumnType("integer")
                        .HasColumnName("version_no");

                    b.HasKey("Id")
                        .HasName("pk_version");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_version_created_by");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("IX_version_document_id");

                    b.HasIndex("DocumentId", "VersionNo")
                        .IsUnique()
                        .HasDatabaseName("IX_version_document_id_version_no");

                    b.ToTable("version", "doc");
                });

            modelBuilder.Entity("ECM.Document.Infrastructure.Persistence.ReadModels.EffectiveAclFlatEntry", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("IdempotencyKey")
                        .HasColumnType("text")
                        .HasColumnName("idempotency_key");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset?>("ValidToUtc")
                        .HasColumnType("timestamptz")
                        .HasColumnName("valid_to");

                    b.HasKey("DocumentId", "UserId", "IdempotencyKey")
                        .HasName("pk_effective_acl_flat");

                    b.HasIndex("UserId", "ValidToUtc", "DocumentId")
                        .HasDatabaseName("doc_effective_acl_flat_user_document_idx");

                    b.ToTable("effective_acl_flat", "doc");
                });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Aggregate")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("aggregate");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<DateTimeOffset>("OccurredAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTimeOffset?>("ProcessedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox");

                    b.ToTable("outbox", "ops", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ECM.Document.Domain.Documents.Document", b =>
                {
                    b.HasOne("ECM.Document.Domain.DocumentTypes.DocumentType", "Type")
                        .WithMany("Documents")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_document_document_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ECM.Document.Domain.Documents.DocumentMetadata", b =>
                {
                    b.HasOne("ECM.Document.Domain.Documents.Document", "Document")
                        .WithOne("Metadata")
                        .HasForeignKey("ECM.Document.Domain.Documents.DocumentMetadata", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_metadata_document_document_id");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ECM.Document.Domain.Signatures.SignatureRequest", b =>
                {
                    b.HasOne("ECM.Document.Domain.Documents.Document", "Document")
                        .WithMany("SignatureRequests")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_signature_request_document_document_id");

                    b.HasOne("ECM.Document.Domain.Versions.DocumentVersion", "Version")
                        .WithMany("SignatureRequests")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_signature_request_version_version_id");

                    b.Navigation("Document");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ECM.Document.Domain.Signatures.SignatureResult", b =>
                {
                    b.HasOne("ECM.Document.Domain.Signatures.SignatureRequest", "Request")
                        .WithOne("Result")
                        .HasForeignKey("ECM.Document.Domain.Signatures.SignatureResult", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_signature_result_signature_request_request_id");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ECM.Document.Domain.Tags.DocumentTag", b =>
                {
                    b.HasOne("ECM.Document.Domain.Documents.Document", "Document")
                        .WithMany("Tags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_tag_document_document_id");

                    b.HasOne("ECM.Document.Domain.Tags.TagLabel", "Tag")
                        .WithMany("DocumentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_tag_tag_labels_tag_id");

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ECM.Document.Domain.Tags.TagLabel", b =>
                {
                    b.HasOne("ECM.Document.Domain.Tags.TagNamespace", "Namespace")
                        .WithMany("Labels")
                        .HasForeignKey("NamespaceSlug")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tag_label_tag_namespace_namespace_slug");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("ECM.Document.Domain.Versions.DocumentVersion", b =>
                {
                    b.HasOne("ECM.Document.Domain.Documents.Document", "Document")
                        .WithMany("Versions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_version_document_document_id");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ECM.Document.Domain.DocumentTypes.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ECM.Document.Domain.Documents.Document", b =>
                {
                    b.Navigation("Metadata");

                    b.Navigation("SignatureRequests");

                    b.Navigation("Tags");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("ECM.Document.Domain.Signatures.SignatureRequest", b =>
                {
                    b.Navigation("Result");
                });

            modelBuilder.Entity("ECM.Document.Domain.Tags.TagLabel", b =>
                {
                    b.Navigation("DocumentTags");
                });

            modelBuilder.Entity("ECM.Document.Domain.Tags.TagNamespace", b =>
                {
                    b.Navigation("Labels");
                });

            modelBuilder.Entity("ECM.Document.Domain.Versions.DocumentVersion", b =>
                {
                    b.Navigation("SignatureRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
