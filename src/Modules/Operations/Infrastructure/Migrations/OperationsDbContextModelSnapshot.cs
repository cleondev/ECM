// <auto-generated />
using System;
using ECM.Operations.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECM.Operations.Infrastructure.Migrations
{
    [DbContext(typeof(OperationsDbContext))]
    partial class OperationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasDefaultSchema("ops");

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.AuditEvent", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasColumnName("id");

                b.Property<Guid?>("ActorId")
                    .HasColumnType("uuid")
                    .HasColumnName("actor_id");

                b.Property<string>("Action")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)")
                    .HasColumnName("action");

                b.Property<string>("Details")
                    .IsRequired()
                    .HasColumnType("jsonb")
                    .HasColumnName("details")
                    .HasDefaultValueSql("'{}'::jsonb");

                b.Property<Guid>("ObjectId")
                    .HasColumnType("uuid")
                    .HasColumnName("object_id");

                b.Property<string>("ObjectType")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)")
                    .HasColumnName("object_type");

                b.Property<DateTimeOffset>("OccurredAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("occurred_at")
                    .HasDefaultValueSql("now()");

                b.HasKey("Id")
                    .HasName("PK_audit_event");

                b.HasIndex("OccurredAtUtc")
                    .HasDatabaseName("ops_audit_time_idx");

                b.HasIndex("ObjectType", "ObjectId")
                    .HasDatabaseName("ops_audit_obj_idx");

                b.ToTable("audit_event", "ops");
            });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.OutboxMessage", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasColumnName("id");

                b.Property<string>("Aggregate")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)")
                    .HasColumnName("aggregate");

                b.Property<Guid>("AggregateId")
                    .HasColumnType("uuid")
                    .HasColumnName("aggregate_id");

                b.Property<DateTimeOffset>("OccurredAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("occurred_at");

                b.Property<string>("Payload")
                    .IsRequired()
                    .HasColumnType("jsonb")
                    .HasColumnName("payload");

                b.Property<DateTimeOffset?>("ProcessedAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("processed_at");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("type");

                b.HasKey("Id")
                    .HasName("PK_outbox");

                b.HasIndex("ProcessedAtUtc")
                    .HasDatabaseName("ops_outbox_processed_idx");

                b.HasIndex("Aggregate", "AggregateId")
                    .HasDatabaseName("ops_outbox_agg_idx");

                b.ToTable("outbox", "ops");
            });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.RetentionCandidate", b =>
            {
                b.Property<Guid>("DocumentId")
                    .HasColumnType("uuid")
                    .HasColumnName("document_id");

                b.Property<DateTimeOffset>("DueAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("due_at");

                b.Property<Guid>("PolicyId")
                    .HasColumnType("uuid")
                    .HasColumnName("policy_id");

                b.Property<string>("Reason")
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)")
                    .HasColumnName("reason");

                b.HasKey("DocumentId")
                    .HasName("PK_retention_candidate");

                b.HasIndex("DueAtUtc")
                    .HasDatabaseName("ops_retention_due_idx");

                b.HasIndex("PolicyId")
                    .HasDatabaseName("IX_retention_candidate_policy_id");

                b.ToTable("retention_candidate", "ops");
            });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.RetentionPolicy", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                b.Property<DateTimeOffset>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<bool>("IsActive")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasColumnName("is_active")
                    .HasDefaultValue(true);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)")
                    .HasColumnName("name");

                b.Property<string>("Rule")
                    .IsRequired()
                    .HasColumnType("jsonb")
                    .HasColumnName("rule");

                b.HasKey("Id")
                    .HasName("PK_retention_policy");

                b.ToTable("retention_policy", "ops");
            });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.UserNotification", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                b.Property<DateTimeOffset>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Message")
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnType("character varying(1024)")
                    .HasColumnName("message");

                b.Property<string>("Payload")
                    .IsRequired()
                    .HasColumnType("jsonb")
                    .HasColumnName("payload")
                    .HasDefaultValueSql("'{}'::jsonb");

                b.Property<DateTimeOffset?>("ReadAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("read_at");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("title");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)")
                    .HasColumnName("type");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.Property<bool>("IsRead")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasColumnName("is_read")
                    .HasDefaultValue(false);

                b.HasKey("Id")
                    .HasName("PK_notification");

                b.HasIndex("UserId", "IsRead", "CreatedAtUtc")
                    .HasDatabaseName("ops_notification_user_idx");

                b.ToTable("notification", "ops");
            });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.WebhookDelivery", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                b.Property<int>("AttemptCount")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("attempt_count")
                    .HasDefaultValue(0);

                b.Property<string>("Error")
                    .HasMaxLength(1024)
                    .HasColumnType("character varying(1024)")
                    .HasColumnName("error");

                b.Property<string>("EventType")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)")
                    .HasColumnName("event_type");

                b.Property<DateTimeOffset>("EnqueuedAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("enqueued_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Payload")
                    .IsRequired()
                    .HasColumnType("jsonb")
                    .HasColumnName("payload");

                b.Property<DateTimeOffset?>("DeliveredAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("delivered_at");

                b.Property<string>("Status")
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnType("character varying(64)")
                    .HasColumnName("status");

                b.Property<Guid>("WebhookId")
                    .HasColumnType("uuid")
                    .HasColumnName("webhook_id");

                b.HasKey("Id")
                    .HasName("PK_webhook_delivery");

                b.HasIndex("WebhookId", "Status")
                    .HasDatabaseName("ops_webhook_delivery_status_idx");

                b.ToTable("webhook_delivery", "ops");
            });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.WebhookSubscription", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                b.Property<DateTimeOffset?>("DeactivatedAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("deactivated_at");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)")
                    .HasColumnName("description");

                b.Property<string[]>("EventTypes")
                    .IsRequired()
                    .HasColumnType("text[]")
                    .HasColumnName("event_types");

                b.Property<bool>("IsActive")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasColumnName("is_active")
                    .HasDefaultValue(true);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)")
                    .HasColumnName("name");

                b.Property<string>("Secret")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("secret");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnType("character varying(512)")
                    .HasColumnName("url");

                b.Property<DateTimeOffset>("CreatedAtUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.HasKey("Id")
                    .HasName("PK_webhook");

                b.HasIndex("IsActive")
                    .HasDatabaseName("ops_webhook_active_idx");

                b.ToTable("webhook", "ops");
            });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.RetentionCandidate", b =>
                {
                    b.HasOne("ECM.Operations.Infrastructure.Persistence.RetentionPolicy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("ECM.Operations.Infrastructure.Persistence.WebhookDelivery", b =>
                {
                    b.HasOne("ECM.Operations.Infrastructure.Persistence.WebhookSubscription", "Webhook")
                        .WithMany()
                        .HasForeignKey("WebhookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Webhook");
                });
#pragma warning restore 612, 618
        }
    }
}
