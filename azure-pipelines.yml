trigger:
  branches:
    include:
      - main
      - develop
      - feature/*

variables:
  - group: ECM-SECRETS

stages:
# ==================== Build & Push ====================
- stage: Build
  displayName: Build & Push Docker Images
  jobs:
  - job: build_and_push
    pool:
      name: 'ECM_CI'
    steps:
    - script: |
        set -euo pipefail

        webhook_url="${WEBHOOK_URL:-}"

        if [ -z "$webhook_url" ] || [[ "$webhook_url" == \$(*) ]]; then
          echo "Webhook URL is not configured. Skipping build start notification."
          exit 0
        fi

        build_time="$(date '+%Y-%m-%d %H:%M:%S')"
        requested_by="$(Build.RequestedFor)"
        branch_name="$(Build.SourceBranchName)"
        pipeline_name="$(Build.DefinitionName)"
        stage_name="$(System.StageDisplayName)"

        payload_template='{
  "text": "**Deployment Notice**\n\nPipeline **PIPELINE_NAME** is starting stage **STAGE_NAME**.\n\n**Time**: BUILD_TIME\n**Triggered by**: REQUESTED_BY\n**Branch**: BRANCH_NAME\n\nPlease prepare for the upcoming deployment."
}'

        payload="${payload_template//PIPELINE_NAME/$pipeline_name}"
        payload="${payload//STAGE_NAME/$stage_name}"
        payload="${payload//BUILD_TIME/$build_time}"
        payload="${payload//REQUESTED_BY/$requested_by}"
        payload="${payload//BRANCH_NAME/$branch_name}"

        if curl -sS -X POST -H 'Content-Type: application/json' -d "$payload" "$webhook_url" > /dev/null; then
          echo "✅ Sent build start notification."
        else
          echo "⚠️ Failed to send build start notification." >&2
        fi
      displayName: '📢 Notify: Build stage is starting'
      condition: always()
      env:
        WEBHOOK_URL: $(Team_WebHook_Url)

    - checkout: self
      fetchDepth: 0

    - task: UseDotNet@2
      inputs:
        version: '9.x'

    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'

    - script: |
        set -euo pipefail

        echo "= Login Harbor..."
        echo "$(HARBOR_PASS)" | docker login harbor.local:8443 -u "$(HARBOR_USER)" --password-stdin

        TAG="$(Build.SourceBranchName)-$(Build.BuildId)"
        REGISTRY="harbor.local:8443/ecm"

        echo "= Build AppGateway.Api + UI"
        docker build -f src/AppGateway/AppGateway.Api/Dockerfile -t "$REGISTRY/appgateway-api:$TAG" .

        echo "= Build ECM.Host"
        docker build -f src/ECM/ECM.Host/Dockerfile -t "$REGISTRY/ecm-host:$TAG" .

        echo "= Build Workers"
        docker build -f src/Workers/Notify.Worker/Dockerfile -t "$REGISTRY/notify-worker:$TAG" .
        docker build -f src/Workers/OutboxDispatcher.Worker/Dockerfile -t "$REGISTRY/outbox-worker:$TAG" .
        docker build -f src/Workers/SearchIndexer.Worker/Dockerfile -t "$REGISTRY/searchindexer-worker:$TAG" .

        echo "= Push all images"
        docker push "$REGISTRY/appgateway-api:$TAG"
        docker push "$REGISTRY/ecm-host:$TAG"
        docker push "$REGISTRY/notify-worker:$TAG"
        docker push "$REGISTRY/outbox-worker:$TAG"
        docker push "$REGISTRY/searchindexer-worker:$TAG"
      displayName: 'Build & Push Docker Images'

# ==================== Deploy ====================
- stage: Deploy
  displayName: Deploy to App Server
  dependsOn: Build
  jobs:
  - job: deploy
    pool:
      name: 'ECM_CI'
    steps:
    - script: |
        set -euo pipefail

        webhook_url="${WEBHOOK_URL:-}"

        if [ -z "$webhook_url" ] || [[ "$webhook_url" == \$(*) ]]; then
          echo "Webhook URL is not configured. Skipping start notification."
          exit 0
        fi

        deploy_time="$(date '+%Y-%m-%d %H:%M:%S')"
        requested_by="$(Build.RequestedFor)"
        branch_name="$(Build.SourceBranchName)"
        pipeline_name="$(Build.DefinitionName)"
        stage_name="$(System.StageDisplayName)"

        payload_template='{
  "text": "**Deployment Notice**\n\nPipeline **PIPELINE_NAME** is starting stage **STAGE_NAME**.\n\n**Time**: DEPLOY_TIME\n**Triggered by**: REQUESTED_BY\n**Branch**: BRANCH_NAME"
}'

        payload="${payload_template//PIPELINE_NAME/$pipeline_name}"
        payload="${payload//STAGE_NAME/$stage_name}"
        payload="${payload//DEPLOY_TIME/$deploy_time}"
        payload="${payload//REQUESTED_BY/$requested_by}"
        payload="${payload//BRANCH_NAME/$branch_name}"

        if curl -sS -X POST -H 'Content-Type: application/json' -d "$payload" "$webhook_url" > /dev/null; then
          echo "✅ Sent deployment start notification."
        else
          echo "⚠️ Failed to send start notification." >&2
        fi
      displayName: '📢 Notify: Deployment is about to start'
      condition: always()
      env:
        WEBHOOK_URL: $(Team_WebHook_Url)

    - task: SSH@0
      displayName: "Deploy to 172.20.1.24"
      inputs:
        sshEndpoint: "ecm-appserver-ssh"
        runOptions: "inline"
        inline: |
          set -euo pipefail
          cd /data/ecm

          choose_secret() {
            local var_name="$1"
            local fallback="${2:-}"
            local current="${!var_name:-}"

            if [[ -z "$current" || "$current" == \$(* ]]; then
              current="$fallback"
            fi

            if [[ "$current" == \$(* ]]; then
              current=""
            fi

            printf -v "$var_name" '%s' "$current"
          }

          IMAGE_TAG="$(Build.SourceBranchName)-$(Build.BuildId)"

          DB_CONNSTRING_VALUE="${DB_CONNSTRING:-}"
          MINIO_ENDPOINT_VALUE="${MINIO_ENDPOINT:-}"
          MINIO_ACCESS_KEY_VALUE="${MINIO_ACCESS_KEY:-}"
          MINIO_SECRET_KEY_VALUE="${MINIO_SECRET_KEY:-}"
          REDPANDA_BROKERS_VALUE="${REDPANDA_BROKERS:-}"

          choose_secret DB_CONNSTRING_VALUE "$(ECM_ConnectionStrings__postgres)"
          choose_secret MINIO_ENDPOINT_VALUE "$(ECM_FileStorage__ServiceUrl)"
          choose_secret MINIO_ACCESS_KEY_VALUE "$(ECM_FileStorage__AccessKeyId)"
          choose_secret MINIO_SECRET_KEY_VALUE "$(ECM_FileStorage__SecretAccessKey)"
          choose_secret REDPANDA_BROKERS_VALUE "$(ECM_Kafka__BootstrapServers)"

          missing=()
          [[ -z "$DB_CONNSTRING_VALUE" ]] && missing+=("DB_CONNSTRING / ECM_ConnectionStrings__postgres")
          [[ -z "$MINIO_ENDPOINT_VALUE" ]] && missing+=("MINIO_ENDPOINT / ECM_FileStorage__ServiceUrl")
          [[ -z "$MINIO_ACCESS_KEY_VALUE" ]] && missing+=("MINIO_ACCESS_KEY / ECM_FileStorage__AccessKeyId")
          [[ -z "$MINIO_SECRET_KEY_VALUE" ]] && missing+=("MINIO_SECRET_KEY / ECM_FileStorage__SecretAccessKey")
          [[ -z "$REDPANDA_BROKERS_VALUE" ]] && missing+=("REDPANDA_BROKERS / ECM_Kafka__BootstrapServers")

          if [[ ${#missing[@]} -gt 0 ]]; then
            echo "[deploy] Thiếu biến môi trường bắt buộc: ${missing[*]}" >&2
            exit 1
          fi

          export IMAGE_TAG
          export DB_CONNSTRING="$DB_CONNSTRING_VALUE"
          export MINIO_ENDPOINT="$MINIO_ENDPOINT_VALUE"
          export MINIO_ACCESS_KEY="$MINIO_ACCESS_KEY_VALUE"
          export MINIO_SECRET_KEY="$MINIO_SECRET_KEY_VALUE"
          export REDPANDA_BROKERS="$REDPANDA_BROKERS_VALUE"

          echo "= Login Harbor"
          echo "$(HARBOR_PASS)" | docker login harbor.local:8443 -u "$(HARBOR_USER)" --password-stdin

          echo "+ Pulling images..."
          docker compose pull

          echo "= Updating services..."
          docker compose up -d --remove-orphans

          echo "' Done."

    - script: |
        set -euo pipefail

        webhook_url="${WEBHOOK_URL:-}"

        if [ -z "$webhook_url" ] || [[ "$webhook_url" == \$(*) ]]; then
          echo "Webhook URL is not configured. Skipping completion notification."
          exit 0
        fi

        deploy_time="$(date '+%Y-%m-%d %H:%M:%S')"
        branch_name="$(Build.SourceBranchName)"
        changeset="$(Build.SourceVersion)"
        requested_by="$(Build.RequestedFor)"
        pipeline_name="$(Build.DefinitionName)"
        stage_name="$(System.StageDisplayName)"

        payload_template='{
  "text": "**PIPELINE_NAME deployment completed**\n\n**Stage**: STAGE_NAME\n**Branch**: BRANCH_NAME\n**Changeset**: CHANGESET\n**Requested by**: REQUESTED_BY\n**Finished at**: DEPLOY_TIME"
}'

        payload="${payload_template//PIPELINE_NAME/$pipeline_name}"
        payload="${payload//STAGE_NAME/$stage_name}"
        payload="${payload//BRANCH_NAME/$branch_name}"
        payload="${payload//CHANGESET/$changeset}"
        payload="${payload//REQUESTED_BY/$requested_by}"
        payload="${payload//DEPLOY_TIME/$deploy_time}"

        if curl -sS -X POST -H 'Content-Type: application/json' -d "$payload" "$webhook_url" > /dev/null; then
          echo "✅ Sent deployment completion notification."
        else
          echo "⚠️ Failed to send completion notification." >&2
        fi
      displayName: '✅ Notify: Deployment completed'
      condition: succeeded()
      env:
        WEBHOOK_URL: $(Team_WebHook_Url)
